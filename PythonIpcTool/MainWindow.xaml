<Controls:MetroWindow x:Class="PythonIpcTool.Views.MainWindow"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:local="clr-namespace:PythonIpcTool.Views"
                      xmlns:vm="clr-namespace:PythonIpcTool.ViewModels"
                      xmlns:models="clr-namespace:PythonIpcTool.Models"
                      xmlns:converters="clr-namespace:PythonIpcTool.Converters"
                      xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                      xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                      xmlns:sys="clr-namespace:System;assembly=mscorlib"
                      mc:Ignorable="d"
                      Title="Python IPC Tool"
                      Height="720" Width="1200"
                      MinHeight="600" MinWidth="900"
                      WindowStartupLocation="CenterScreen"
                      d:DataContext="{d:DesignInstance Type=vm:DesignMainViewModel, IsDesignTimeCreatable=True}"
                      GlowBrush="{DynamicResource MahApps.Brushes.Accent}">

    <Controls:MetroWindow.Resources>
        <!-- Define all converters in a central place for clarity -->
        <ResourceDictionary>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:StringNullOrEmptyToVisibilityConverter x:Key="StringNullOrEmptyToVisibilityConverter"/>
            <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
            <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
            <converters:EnumToBooleanConverter x:Key="EnumToBooleanConverter"/>
            <converters:LogLevelToBrushConverter x:Key="LogLevelToBrushConverter"/>
        </ResourceDictionary>
    </Controls:MetroWindow.Resources>

    <!-- Right-side commands in the title bar for theme toggling -->
    <Controls:MetroWindow.RightWindowCommands>
        <Controls:WindowCommands>
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                <TextBlock Text="Dark Mode" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <Controls:ToggleSwitch IsOn="{Binding IsDarkMode, Mode=TwoWay}"
                                       OnContent="" OffContent=""
                                       AutomationProperties.Name="Theme Toggle"/>
            </StackPanel>
        </Controls:WindowCommands>
    </Controls:MetroWindow.RightWindowCommands>

    <!-- Main Content Grid: Divides the window into two primary columns -->
    <Grid Margin="15">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1.5*"/>
            <!-- Left Column for input and configuration -->
            <ColumnDefinition Width="2*"/>
            <!-- Right Column for output and logs -->
        </Grid.ColumnDefinitions>

        <!-- =================================================================== -->
        <!-- LEFT COLUMN: Configuration and Input                              -->
        <!-- =================================================================== -->
        <DockPanel Grid.Column="0" Margin="0 0 10 0">

            <!-- Action Buttons are docked to the bottom of the left column. This is correct. -->
            <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0 15 0 0">
                <Button Command="{Binding ClearInputCommand}" ToolTip="Clear the Input Data text area">
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:PackIconMaterial Kind="CloseCircleOutline" VerticalAlignment="Center" Margin="0 0 5 0"/>
                        <TextBlock Text="Clear Input"/>
                    </StackPanel>
                </Button>

                <!-- Cancel Button (Visible only when processing) -->
                <Button Command="{Binding CancelExecutionCommand}"
                Visibility="{Binding IsProcessing, Converter={StaticResource BooleanToVisibilityConverter}}"
                Background="{DynamicResource MahApps.Brushes.Gray5}"
                Margin="10 0 0 0"
                ToolTip="Cancel the current script execution">
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:PackIconMaterial Kind="Cancel" VerticalAlignment="Center" Margin="0 0 5 0"/>
                        <TextBlock Text="Cancel"/>
                    </StackPanel>
                </Button>

                <!-- Execute Button (Visible only when NOT processing) -->
                <Button Command="{Binding ExecutePythonScriptCommand}"
                Style="{DynamicResource MahApps.Styles.Button.Accent}"
                Visibility="{Binding IsProcessing, Converter={StaticResource InverseBooleanToVisibilityConverter}}"
                Background="{DynamicResource MahApps.Brushes.Gray5}"
                        Margin="10 0 0 0"
                ToolTip="Execute the Python script with the current configuration">
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:PackIconMaterial Kind="Play" VerticalAlignment="Center" Margin="0 0 5 0"/>
                        <TextBlock Text="Execute Script"/>
                    </StackPanel>
                </Button>

                <!-- Busy Indicator -->
                <Controls:ProgressRing IsActive="{Binding IsProcessing}" Width="20" Height="20" Margin="10 0 0 0"
                               Foreground="{DynamicResource MahApps.Brushes.Accent}"/>
            </StackPanel>

            <!-- 
                MODIFIED: Use a ScrollViewer to handle cases where the window is too small.
                The content (a StackPanel) will fill the remaining space of the DockPanel.
            -->
            <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                <StackPanel Orientation="Vertical">

                    <!-- 1. Direct Execution Configuration -->
                    <GroupBox Margin="0 0 0 10">
                        <GroupBox.Header>
                            <StackPanel Orientation="Horizontal">
                                <iconPacks:PackIconMaterial Kind="Flash" VerticalAlignment="Center" Margin="0,0,5,0"/>
                                <TextBlock Text="Current Configuration" FontWeight="Bold"/>
                            </StackPanel>
                        </GroupBox.Header>
                        <StackPanel Margin="5">
                            <TextBlock Text="Python Interpreter Path:" FontWeight="SemiBold"/>
                            <DockPanel Margin="0,5,0,5">
                                <Button DockPanel.Dock="Right" Content="Browse..." Command="{Binding BrowsePythonInterpreterCommand}" Margin="5,0,0,0"/>
                                <TextBox Text="{Binding PythonInterpreterPath, UpdateSourceTrigger=PropertyChanged}"/>
                            </DockPanel>

                            <!-- Virtual Env Status Panel -->
                            <!-- This panel as a whole is only visible when the VirtualEnvStatusMessage string is not null or empty. -->
                            <StackPanel Orientation="Horizontal" Margin="0 2 0 10"
                                Visibility="{Binding VirtualEnvStatusMessage, Converter={StaticResource StringNullOrEmptyToVisibilityConverter}}">

                                <!-- 
                                    Success Icon: A green checkmark.
                                    Visible only when a virtual environment IS detected (IsVirtualEnvDetected = True).
                                -->
                                <iconPacks:PackIconMaterial Kind="CheckDecagram" 
                                    VerticalAlignment="Center" 
                                    Margin="0 0 5 0"
                                    Foreground="ForestGreen"
                                    ToolTip="A virtual environment was detected."
                                    Visibility="{Binding IsVirtualEnvDetected, Converter={StaticResource BooleanToVisibilityConverter}}"/>

                                <!-- 
                                    Warning Icon: An orange alert circle.
                                    Visible only when a virtual environment IS NOT detected (IsVirtualEnvDetected = False).
                                    We use the InverseBooleanToVisibilityConverter for this.
                                -->
                                <iconPacks:PackIconMaterial Kind="AlertCircleOutline" 
                                    VerticalAlignment="Center" 
                                    Margin="0 0 5 0"
                                    Foreground="Orange"
                                    ToolTip="No virtual environment detected. Using global Python installation is not recommended for production."
                                    Visibility="{Binding IsVirtualEnvDetected, Converter={StaticResource InverseBooleanToVisibilityConverter}}"/>

                                <!-- 
                                    Status Message Text: Displays the text from the ViewModel.
                                -->
                                <TextBlock Text="{Binding VirtualEnvStatusMessage}"
                                   FontStyle="Italic"
                                   VerticalAlignment="Center"
                                   Opacity="0.8"/>
                            </StackPanel>
                            
                            <TextBlock Text="Python Script Path:" FontWeight="SemiBold"/>
                            <DockPanel Margin="0,5,0,15">
                                <Button DockPanel.Dock="Right" Content="Browse..." Command="{Binding BrowsePythonScriptCommand}" Margin="5,0,0,0"/>
                                <TextBox Text="{Binding PythonScriptPath, UpdateSourceTrigger=PropertyChanged}"/>
                            </DockPanel>

                            <TextBlock Text="IPC Communication Mode:" FontWeight="SemiBold"/>
                            <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
                                <RadioButton GroupName="IpcMode" Content="Standard I/O" Margin="0,0,15,0"
                                     IsChecked="{Binding SelectedIpcMode, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static models:IpcMode.StandardIO}}"/>
                                <RadioButton GroupName="IpcMode" Content="Local Socket"
                                     IsChecked="{Binding SelectedIpcMode, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static models:IpcMode.LocalSocket}}"/>
                            </StackPanel>
                        </StackPanel>
                    </GroupBox>

                    <!-- 2. Saved Profiles Area -->
                    <GroupBox Margin="0 0 0 10">
                        <GroupBox.Header>
                            <StackPanel Orientation="Horizontal">
                                <iconPacks:PackIconMaterial Kind="StarBoxMultiple" VerticalAlignment="Center" Margin="0,0,5,0"/>
                                <TextBlock Text="Saved Profiles" FontWeight="Bold"/>
                            </StackPanel>
                        </GroupBox.Header>
                        <DockPanel Margin="5">
                            <Button DockPanel.Dock="Right" Command="{Binding SaveCurrentAsProfileCommand}" ToolTip="Save Current Configuration as a New Profile" Margin="5,0,0,0" Padding="8,5">
                                <iconPacks:PackIconMaterial Kind="ContentSave"/>
                            </Button>
                            <Button DockPanel.Dock="Right" Command="{Binding RemoveSelectedProfileCommand}" ToolTip="Remove Selected Profile" Padding="8,5">
                                <iconPacks:PackIconMaterial Kind="Minus"/>
                            </Button>
                            <ComboBox ItemsSource="{Binding ScriptProfiles}"
                              SelectedItem="{Binding SelectedScriptProfile, Mode=TwoWay}"
                              DisplayMemberPath="Name"
                              Controls:TextBoxHelper.Watermark="Load a saved profile..."/>
                        </DockPanel>
                    </GroupBox>

                    <!-- 3. Input Data GroupBox -->
                    <GroupBox>
                        <GroupBox.Header>
                            <StackPanel Orientation="Horizontal">
                                <iconPacks:PackIconMaterial Kind="CodeJson" VerticalAlignment="Center" Margin="0 0 5 0"/>
                                <TextBlock Text="Input Data (JSON)" FontWeight="Bold"/>
                            </StackPanel>
                        </GroupBox.Header>
                        <!-- Use a Grid to allow the TextBox to stretch vertically -->
                        <Grid>
                            <TextBox Text="{Binding InputData, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             AcceptsReturn="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"
                             MinHeight="100"
                             FontFamily="Consolas, Cascadia Mono, Courier New"
                             Controls:TextBoxHelper.Watermark="Enter JSON data for Python script here..."/>
                        </Grid>
                    </GroupBox>

                </StackPanel>
            </ScrollViewer>
        </DockPanel>

        <!-- =================================================================== -->
        <!-- RIGHT COLUMN: Output and Logs                                       -->
        <!-- =================================================================== -->
        <Grid Grid.Column="1" Margin="10 0 0 0">
            <Grid.RowDefinitions>
                <RowDefinition Height="1.5*" MinHeight="150"/>
                <!-- Output Data -->
                <RowDefinition Height="Auto"/>
                <!-- Grid Splitter -->
                <RowDefinition Height="2*" MinHeight="200"/>
                <!-- Logs -->
            </Grid.RowDefinitions>

            <!-- Output Data GroupBox -->
            <GroupBox Grid.Row="0">
                <GroupBox.Header>
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:PackIconMaterial Kind="ArrowLeftBoldBoxOutline" VerticalAlignment="Center" Margin="0 0 5 0"/>
                        <TextBlock Text="Output Data from Python" FontWeight="Bold"/>
                    </StackPanel>
                </GroupBox.Header>
                <!-- Use a Grid to overlay the TextBox and the Watermark TextBlock -->
                <Grid>
                    <!-- The main TextBox for displaying the output -->
                    <TextBox Text="{Binding OutputResult, Mode=OneWay}"
                         AcceptsReturn="True" 
                         TextWrapping="Wrap" 
                         VerticalScrollBarVisibility="Auto"
                         IsReadOnly="True"
                         FontFamily="Consolas, Cascadia Mono, Courier New"
                         Background="Transparent" 
                         BorderThickness="0"/>

                    <!-- 
                        NEW: Watermark for empty output.
                        This TextBlock sits on top of the TextBox and is only visible when OutputResult is null or empty.
                    -->
                    <TextBlock Text="Output from Python script will appear here..."
                       Foreground="{DynamicResource MahApps.Brushes.Gray5}"
                       IsHitTestVisible="False"
                       VerticalAlignment="Center" 
                       HorizontalAlignment="Center"
                       FontSize="14">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource MahApps.Styles.TextBlock}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <!-- Trigger to show the watermark when the bound property is an empty string -->
                                    <DataTrigger Binding="{Binding OutputResult}" Value="{x:Static sys:String.Empty}">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                    <!-- Trigger to show the watermark when the bound property is null -->
                                    <DataTrigger Binding="{Binding OutputResult}" Value="{x:Null}">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Grid>
            </GroupBox>

            <!-- Grid Splitter for resizing -->
            <GridSplitter Grid.Row="1" Height="5" HorizontalAlignment="Stretch" VerticalAlignment="Center"
                          Background="Transparent"/>

            <!-- Status & Log GroupBox -->
            <GroupBox Grid.Row="2">
                <GroupBox.Header>
                    <StackPanel Orientation="Horizontal">
                        <iconPacks:PackIconMaterial Kind="Console" VerticalAlignment="Center" Margin="0 0 5 0"/>
                        <TextBlock Text="Status &amp; Log" FontWeight="Bold"/>
                    </StackPanel>
                </GroupBox.Header>

                <!-- Use a Grid to overlay the ListView and the Watermark TextBlock -->
                <Grid>
                    <!-- The main ListView for displaying log entries -->
                    <ListView ItemsSource="{Binding LogEntries}"
                      VirtualizingPanel.IsVirtualizing="True" 
                      VirtualizingPanel.VirtualizationMode="Recycling"
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                      BorderThickness="0"
                      Background="Transparent"
                      SelectionMode="Extended"
                      local:ScrollViewerExtensions.AutoScrollToEnd="True">

                        <!-- Hide the ListView completely when there are no items, -->
                        <!-- so the Watermark is clearly visible without any ListView artifacts like headers. -->
                        <ListView.Style>
                            <Style TargetType="ListView" BasedOn="{StaticResource MahApps.Styles.ListView}">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding LogEntries.Count}" Value="0">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ListView.Style>

                        <ListView.View>
                            <GridView AllowsColumnReorder="False">
                                <GridViewColumn Header="Timestamp" Width="120"
                                    DisplayMemberBinding="{Binding Timestamp, StringFormat='HH:mm:ss.fff'}"/>
                                <GridViewColumn Header="Level" Width="90">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <Border CornerRadius="3" Padding="5,2" Margin="2"
                                        Background="{Binding Level, Converter={StaticResource LogLevelToBrushConverter}}">
                                                <TextBlock Text="{Binding Level}" FontWeight="Bold" Foreground="White"
                                               HorizontalAlignment="Center"/>
                                            </Border>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Header="Message" Width="500" 
                                    DisplayMemberBinding="{Binding Message}"/>
                            </GridView>
                        </ListView.View>
                    </ListView>

                    <!-- 
                        NEW: Watermark for empty log.
                        This TextBlock is only visible when the LogEntries collection is empty.
                    -->
                    <TextBlock Text="Logs will appear here..."
                       Foreground="{DynamicResource MahApps.Brushes.Gray5}"
                       IsHitTestVisible="False"
                       VerticalAlignment="Center" 
                       HorizontalAlignment="Center"
                       FontSize="14">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource MahApps.Styles.TextBlock}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <!-- Trigger to show the watermark when the collection's Count is 0 -->
                                    <DataTrigger Binding="{Binding LogEntries.Count}" Value="0">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Grid>
            </GroupBox>
        </Grid>
        
        
    </Grid>

</Controls:MetroWindow>